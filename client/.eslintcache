[{"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\index.js":"1","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\App.js":"2","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\Login.jsx":"3","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Home.jsx":"4","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\Register.jsx":"5","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\ApolloProvider.js":"6","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\context\\message.js":"7","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\context\\auth.js":"8","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\util\\DynamicRoute.jsx":"9","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Messages.jsx":"10","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Users.jsx":"11","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Message.jsx":"12"},{"size":205,"mtime":1629918211989,"results":"13","hashOfConfig":"14"},{"size":1100,"mtime":1629987821433,"results":"15","hashOfConfig":"14"},{"size":3757,"mtime":1629936502815,"results":"16","hashOfConfig":"14"},{"size":2616,"mtime":1629987867018,"results":"17","hashOfConfig":"14"},{"size":5110,"mtime":1629910318484,"results":"18","hashOfConfig":"14"},{"size":1575,"mtime":1629919384681,"results":"19","hashOfConfig":"14"},{"size":2176,"mtime":1629821170089,"results":"20","hashOfConfig":"14"},{"size":1561,"mtime":1629751207419,"results":"21","hashOfConfig":"14"},{"size":484,"mtime":1629751015969,"results":"22","hashOfConfig":"14"},{"size":4705,"mtime":1629990058601,"results":"23","hashOfConfig":"14"},{"size":2504,"mtime":1629939011078,"results":"24","hashOfConfig":"14"},{"size":1214,"mtime":1629775116645,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"10hhgqs",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\index.js",[],["55","56"],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\App.js",[],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\Login.jsx",["57"],"import React, { useState } from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport { gql, useQuery, useLazyQuery } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useAuthDispatch } from '../context/auth';\r\n\r\nconst LOGIN_USER = gql`\r\n  query login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      username\r\n      email\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = (props) => {\r\n    const [variables, setVariables] = useState({\r\n        username: '',\r\n        password: '',\r\n    })\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const dispatch = useAuthDispatch()\r\n\r\n    const [loginUser, { loading }] = useLazyQuery(LOGIN_USER, {\r\n        onError: (err) =>\r\n            // console.log(err.graphQLErrors[0].extensions.errors)\r\n            setErrors(err.graphQLErrors[0].extensions.errors),\r\n        onCompleted(data) {\r\n            localStorage.setItem('token', data.login.token)\r\n            dispatch({ type: 'LOGIN', payload: data.login })\r\n            props.history.push('/')\r\n        }\r\n    })\r\n\r\n    const submitLoginForm = (e) => {\r\n        e.preventDefault()\r\n\r\n        loginUser({ variables })\r\n    }\r\n    return (\r\n        <div>\r\n            <Row className=\"py-5\">\r\n                <Card style={{ width: \"40vw\", margin: \"8vh auto\", minWidth: \"350px\", padding: \"30px\" }}>\r\n                    <Col>\r\n                        <h2 style={{ textAlign: \"center\", fontWeight: \"bold\", paddingBottom: '2vh' }}>Login to chat</h2>\r\n                        <Form onSubmit={submitLoginForm}>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label className={errors.username && 'text-danger'}>\r\n                                    {errors.username ?? 'Username'}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\" value={variables.username}\r\n                                    className={errors.username && 'is-invalid'}\r\n                                    onChange={e => setVariables({ ...variables, username: e.target.value })}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label className={errors.password && 'text-danger'}>\r\n                                    {errors.password ?? 'Password'}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    value={variables.password}\r\n                                    className={errors.password && 'is-invalid'}\r\n                                    onChange={e => setVariables({ ...variables, password: e.target.value })}\r\n                                />\r\n                            </Form.Group>\r\n                            <div className=\"text-center\">\r\n                                <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={loading}>\r\n                                    {loading ? 'loading..' : 'LOGIN'}\r\n                                </Button>\r\n                                <div style={{ marginTop: '5vh' }}>\r\n                                    <p>Don't have account ? <Link to=\"/register\">Go to Register</Link></p>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    </Col>\r\n                </Card>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Home.jsx",["58","59","60","61"],"import React, { useEffect, useState, Fragment } from 'react'\r\nimport { Row, Col, Button, Image } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { gql, useSubscription } from '@apollo/client'\r\n\r\nimport { useAuthDispatch, useAuthState } from '../../context/auth'\r\nimport { useMessageDispatch } from '../../context/message'\r\n\r\nimport Users from './Users';\r\nimport Messages from './Messages'\r\n\r\nconst NEW_MESSAGE = gql`\r\n    subscription newMessage{\r\n        newMessage{\r\n            uuid\r\n            from\r\n            to\r\n            content\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nconst Home = ({ history }) => {\r\n    const authDispatch = useAuthDispatch()\r\n    const messageDispatch = useMessageDispatch()\r\n\r\n    const { user } = useAuthState()\r\n    // const [selectedUser, setSelectedUser] = useState(null)\r\n\r\n    const { data: messageData, error: messageError } = useSubscription(NEW_MESSAGE);\r\n\r\n\r\n    useEffect(() => {\r\n        if (messageError) console.log(messageError)\r\n\r\n        if (messageData) {\r\n            const message = messageData.newMessage\r\n            const otherUser = user.username === message.to ? message.from : message.to\r\n            messageDispatch({\r\n                type: 'ADD_MESSAGE',\r\n                payload: {\r\n                    username: otherUser,\r\n                    message\r\n                }\r\n            })\r\n        }\r\n    }, [messageData, messageError])\r\n\r\n    const logout = () => {\r\n        authDispatch({ type: 'LOGOUT' })\r\n        window.location.href = './login'\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row style={{ margin: 0 }}>\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end', height: '10vh', backgroundImage: \"linear-gradient(90deg, rgba(54,25,153,1) 0%, rgba(54,25,153,0.5) 50%, rgba(54,25,153,0.5) 60%, rgba(54,25,153,1) 100%)\", padding: '2vh' }} >\r\n                    <Link to=\"/login\">\r\n                        {/* <Button variant=\"link\">Login</Button> */}\r\n                    </Link>\r\n                    <Link to=\"/register\">\r\n                        {/* <Button variant=\"link\">Register</Button> */}\r\n                    </Link>\r\n                    <Button variant=\"link\" style={{ backgroundColor: '#FF6495', color: \"white\", textDecoration: 'none', borderRadius: '5px', fontWeight: 'bold' }} onClick={logout}>LOGOUT</Button>\r\n                </div>\r\n            </Row>\r\n            <div style={{ display: 'flex', height: '90vh', margin: 0 }}>\r\n                <Users />\r\n                <Messages />\r\n\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\Register.jsx",[],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\ApolloProvider.js",[],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\context\\message.js",[],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\context\\auth.js",[],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\util\\DynamicRoute.jsx",[],"C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Messages.jsx",["62","63"],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { gql, useLazyQuery, useMutation } from '@apollo/client'\r\nimport { Col, Form, Button } from 'react-bootstrap';\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\nimport InputEmoji from 'react-input-emoji';\r\n\r\nimport { useMessageDispatch, useMessageState } from '../../context/message'\r\nimport Message from './Message'\r\n\r\nconst GET_MESSAGES = gql`\r\n  query getMessages($from: String!) {\r\n    getMessages(from: $from) {\r\n      uuid\r\n      from\r\n      to\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst SEND_MESSAGE = gql`\r\n    mutation sendMessage($to:String!, $content: String! ){\r\n        sendMessage(to: $to, content: $content){\r\n            uuid from to content createdAt\r\n        }\r\n    }\r\n`\r\n\r\nconst Messages = () => {\r\n    const { users } = useMessageState()\r\n    const dispatch = useMessageDispatch()\r\n    const [content, setContent] = useState('')\r\n\r\n    const selectedUser = users?.find((u) => u.selected === true)\r\n    const messages = selectedUser?.messages\r\n\r\n    const [\r\n        getMessages,\r\n        { loading: messagesLoading, data: messagesData },\r\n    ] = useLazyQuery(GET_MESSAGES)\r\n\r\n    const [sendMessage] = useMutation(SEND_MESSAGE, {\r\n        onError: err => console.log(err)\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (selectedUser && !selectedUser.messages) {\r\n            getMessages({ variables: { from: selectedUser.username } })\r\n        }\r\n    }, [selectedUser])\r\n\r\n    useEffect(() => {\r\n        if (messagesData) {\r\n            dispatch({\r\n                type: 'SET_USER_MESSAGES',\r\n                payload: {\r\n                    username: selectedUser.username,\r\n                    messages: messagesData.getMessages,\r\n                },\r\n            })\r\n        }\r\n    }, [messagesData])\r\n\r\n    const submitMessage = e => {\r\n        e.preventDefault()\r\n\r\n        if (content.trim() === '' || !selectedUser) return\r\n\r\n        setContent('')\r\n\r\n        // mutation for sending the message\r\n        sendMessage({ variables: { to: selectedUser.username, content } })\r\n    }\r\n\r\n\r\n    let selectedChatMarkup\r\n    if (!messages && !messagesLoading) {\r\n        selectedChatMarkup = <p className=\"info-text\">Select a friend</p>\r\n    } else if (messagesLoading) {\r\n        selectedChatMarkup = <p className=\"info-text\">Loading..</p>\r\n    } else if (messages.length > 0) {\r\n        selectedChatMarkup = messages.map((message, index) => (\r\n            <Fragment key={message.uuid}>\r\n                <Message message={message} />\r\n                {index === messages.length - 1 && (\r\n                    <div className=\"invisible\">\r\n                        <hr className=\"m-0\" />\r\n                    </div>\r\n                )}\r\n            </Fragment>\r\n        ))\r\n    } else if (messages.length === 0) {\r\n        selectedChatMarkup = <p className=\"info-text\">You are now connected! send your first message!</p>\r\n    }\r\n\r\n\r\n    return (\r\n        <Col xs={8}>\r\n            <div style={{ padding: '0 1vw', height: '80vh' }} className=\"messages-box d-flex flex-column-reverse justify-content-end\">\r\n                {selectedChatMarkup}\r\n            </div>\r\n            <div style={{ bottom: 0, position: 'relative', backgroundImage: \"linear-gradient(90deg, rgba(54,25,153,1) 0%, rgba(54,25,153,0.5) 50%, rgba(54,25,153,0.5) 60%, rgba(54,25,153,1) 100%)\", padding: '2vh' }}>\r\n                <Form>\r\n                    <Form.Group className=\"d-flex align-items-center\">\r\n                        {/* <Form.Control\r\n                            type=\"text\"\r\n                            className=\"message-input rounded-pill bg-secondary border-0 p-3\"\r\n                            placeholder=\"Type a message..\"\r\n                            value={content}\r\n                            onChange={(e) => setContent(e.target.value)}\r\n                        /> */}\r\n                        {/* <div className=\"send-bar\"> */}\r\n                        <InputEmoji\r\n                            value={content}\r\n                            onChange={setContent}\r\n                            cleanOnEnter\r\n                            // onEnter={handleOnEnter}\r\n                            placeholder=\"Type a message\"\r\n                        // className={classes.smaileEmoji}\r\n                        />\r\n                        <Button type=\"submit\" onClick={submitMessage} className=\"send-btn\">\r\n                            <TelegramIcon\r\n                                role=\"button\" style={{ fontSize: '2rem' }} /></Button>\r\n                        {/* </div> */}\r\n                    </Form.Group>\r\n\r\n                </Form>\r\n            </div>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Users.jsx",["64","65","66"],"import React from 'react'\r\nimport { gql, useLazyQuery, useQuery } from '@apollo/client'\r\nimport { Row, Col, Button, Image } from 'react-bootstrap';\r\nimport classNames from 'classnames'\r\n\r\nimport { useMessageDispatch, useMessageState } from '../../context/message';\r\n\r\nconst GET_USERS = gql`\r\n  query getUsers {\r\n    getUsers {\r\n        username\r\n        createdAt\r\n        imageUrl\r\n        latestMessage {\r\n            uuid\r\n            from\r\n            to\r\n            content\r\n            createdAt\r\n      }\r\n    }\r\n  }\r\n`\r\nconst Users = () => {\r\n    const dispatch = useMessageDispatch()\r\n    const { users } = useMessageState()\r\n    const selectedUser = users?.find((u) => u.selected === true)?.username\r\n\r\n    const { loading } = useQuery(GET_USERS, {\r\n        onCompleted: data => dispatch({ type: 'SET_USERS', payload: data.getUsers }),\r\n        onError: err => console.log(err)\r\n    })\r\n    // const [selectedUser, setSelectedUser] = useState(null)\r\n\r\n    let usersMarkup\r\n    if (!users || loading) {\r\n        usersMarkup = <p>Loading..</p>\r\n    } else if (users.length === 0) {\r\n        usersMarkup = <p>No users have joined yet</p>\r\n    } else if (users.length > 0) {\r\n        usersMarkup = users.map((user) => {\r\n            const selected = selectedUser === user.username\r\n            return (<div\r\n                role=\"button\"\r\n                className={classNames(\"user-div d-flex p-3\", { 'bg-white': selected })}\r\n                key={user.username}\r\n                onClick={() => dispatch({ type: 'SET_SELECTED_USER', payload: user.username })\r\n                }\r\n            >\r\n                <Image\r\n                    src={user.imageUrl || 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'}\r\n                    roundedCircle\r\n                    className=\"mr-2 p-1\"\r\n                    style={{ width: 50, height: 50, objectFit: 'cover' }}\r\n                />\r\n                <div style={{ marginLeft: '1vw' }}>\r\n                    <p className=\"text-success\">{user.username}</p>\r\n                    <p style={{ fontSize: '0.7em' }}>\r\n                        {user.latestMessage\r\n                            ? user.latestMessage.content\r\n                            : 'You are now connected!'}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Col xs={4} className=\"p-0 bg-secondary\">\r\n            {usersMarkup}\r\n        </Col>\r\n\r\n    )\r\n}\r\n\r\nexport default Users\r\n","C:\\Mizue's folder\\Client_Server\\atlasChatApp2\\client\\src\\components\\home\\Message.jsx",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":5,"column":15,"nodeType":"73","messageId":"74","endLine":5,"endColumn":23},{"ruleId":"71","severity":1,"message":"75","line":1,"column":28,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"76","line":2,"column":15,"nodeType":"73","messageId":"74","endLine":2,"endColumn":18},{"ruleId":"71","severity":1,"message":"77","line":2,"column":28,"nodeType":"73","messageId":"74","endLine":2,"endColumn":33},{"ruleId":"78","severity":1,"message":"79","line":48,"column":8,"nodeType":"80","endLine":48,"endColumn":35,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":51,"column":8,"nodeType":"80","endLine":51,"endColumn":22,"suggestions":"83"},{"ruleId":"78","severity":1,"message":"84","line":63,"column":8,"nodeType":"80","endLine":63,"endColumn":22,"suggestions":"85"},{"ruleId":"71","severity":1,"message":"86","line":2,"column":15,"nodeType":"73","messageId":"74","endLine":2,"endColumn":27},{"ruleId":"71","severity":1,"message":"87","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":13},{"ruleId":"71","severity":1,"message":"88","line":3,"column":20,"nodeType":"73","messageId":"74","endLine":3,"endColumn":26},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Col' is defined but never used.","'Image' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'messageDispatch' and 'user.username'. Either include them or remove the dependency array.","ArrayExpression",["91"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["92"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUser.username'. Either include them or remove the dependency array.",["93"],"'useLazyQuery' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [messageData, messageDispatch, messageError, user.username]",{"range":"100","text":"101"},"Update the dependencies array to be: [getMessages, selectedUser]",{"range":"102","text":"103"},"Update the dependencies array to be: [dispatch, messagesData, selectedUser.username]",{"range":"104","text":"105"},[1403,1430],"[messageData, messageDispatch, messageError, user.username]",[1464,1478],"[getMessages, selectedUser]",[1796,1810],"[dispatch, messagesData, selectedUser.username]"]